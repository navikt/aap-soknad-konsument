info:
  nais:
    cluster: ${nais.cluster.name}
    image : ${nais.app.image}
    app : ${nais.app.name}
    namespace: ${nais.namespace}
management:
  endpoint:
    env:
      additional-keys-to-sanitize: "client-jwk,private.jwk"
spring:
  kafka:
    bootstrap-servers: ${kafka.brokers}
    properties:
      endpoint:
        identification:
           algorithm:
    security:
       protocol: SSL
    ssl:
      trust-store-location: file:${kafka.truststore.path}
      trust-store-type: JKS
      trust-store-password: ${kafka.credstore.password}
      key-store-location: file:${kafka.keystore.path}
      key-store-type: PKCS12
      key-store-password:  ${kafka.credstore.password}
    producer:
      acks: 1
      client-id: ${spring.application.name}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      properties:
        spring:
          json:
            trusted:
              packages: no.nav.aap.api.s√∏knad.model
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: utland
no.nav:
  security:
    jwt:
      client:
        registration:
          clientcredentials:
              token-endpoint-url: https://login.microsoftonline.com/${azure.app.tenant.id}/oauth2/v2.0/token
              grant-type: client_credentials
              scope: api://dev-fss.aap.aap-fss-proxy/.default
              authentication:
                client-id: ${azure.app.client.id}
                client-jwk: ${azure.app.jwk}
                client-auth-method: private_key_jwt